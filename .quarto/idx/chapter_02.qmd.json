{"title":"Two Body Problem","markdown":{"headingText":"Two Body Problem","containsRefs":false,"markdown":"\n## Equations of Motion for the Two body problem\n\nLet $\\vec{R}_1$ and $\\vec{R}_2$ denote the position vectors of masses $m_1$ and $m_2$ in an inertial reference frame. According to Newton‚Äôs Second Law and the law of gravitation:\n\n$$\nm_1\\ddot{\\vec{R}}_1=-G\\frac{m_1 m_2}{r^3} \\vec{r} \n$$ {#eq-f12}\n\n$$\nm_2\\ddot{\\vec{R}}_2=G\\frac{m_1 m_2}{r^3} \\vec{r}\n$$ {#eq-f21}\n\nwhere $\\vec{r}= \\vec{R}_2-\\vec{R}_1$ the relative position vector between the two masses.\n\n![Diagram of two masses in an inertial frame *OXYZ* (Fig.2.1(a) @curtis2005orbital)](fig2_1.jpeg){width=\"253\"}\n\n### Derivation of the relative equation of motion\n\nSubstituting @eq-f12 and @eq-f21 to $\\vec{r}= \\vec{R}_2-\\vec{R}_1$:\n\n$\\ddot{\\vec{r}}= -G\\frac{m_1 m_2}{r^3}\\vec{r}\\left(\\frac{1}{m_2}+\\frac{1}{m_1}\\right)= -G \\frac{m_1+m_2}{r^3} \\vec{r}$\n\nLet the gravitational ùúá parameter be defined as:\n\n$$\n\\mu= G(m_1+m_2)\n$$\n\nHence the final equation that we use turns out to be:\n\n$$\n\\boxed{\\ddot{\\vec{r}}=-\\frac{\\mu}{r^3}\\vec{r}}\n$$ {#eq-relmotion}\n\n### Motion of Center of Mass\n\nThe center of mass vector is: $\\vec{R}_G=\\frac{m_1\\vec{R}_1+m_2\\vec{R}_2}{m_1+m_2}$\n\nUsing @eq-f12 and @eq-f21 :\n\n$$\n\\ddot{\\vec{R}}_G= \\frac{m_1\\ddot{\\vec{R}}_1+m_2\\ddot{\\vec{R}}_2}{m_1+m_2}\n$$ {#eq-com}\n\n$$\n\\ddot{\\vec{R}}_G=\\frac{-G\\frac{m_1m_2}{r^3}\\vec{r}+G\\frac{m_1m_2}{r^3}\\vec{r}}{m_1+m_2}=0\n$$\n\nHence proved that the acceleration of center of mass is zero.\n\n## Angular momentum in two body problem {#sec-angularmom}\n\nThe angular momentum of body $m_2$ relative to $m_1$ is moment of $m_2$'s relative linear momentum $m_2 \\dot{\\vec{r}}$:\n\n$$\n\\vec{H}_{2/1}= \\vec{r} \\times m_2\\dot{\\vec{r}}\n$$\n\nwhere $\\dot{\\vec{r}}$ is the velocity of $m_2$ relative to $m_1$. We divide this equation of the mass term and get the specific relative angular momentum:\n\n$$\n\\vec{h}= \\vec{r}\\times\\dot{\\vec{r}}\n$$\n\nOn calculating the time derivative:\n\n$$\n\\frac{d\\vec{h}}{dt}=\\underbrace{\\dot{\\vec{r}}\\times\\dot{\\vec{r}}}_{0}+ \\vec{r}\\times \\ddot{\\vec{r}}\n$$\n\nFrom the @eq-relmotion, we see that $\\ddot{\\vec{r}} \\parallel \\vec{r}$ . Hence $\\frac{d\\vec{h}}{dt}=0 \\Rightarrow \\vec{h}$ is conserved.\n\n### Eccentricity of orbit from Laplace-Runge-Lenz vector\n\nDifferentiating $\\dot {\\vec r} \\times \\vec h$:\n\n$$\n\\frac{d}{dt}(\\dot{\\vec r}\\times\\vec h)= \\ddot{\\vec r}\\times\\vec h + \\dot{\\vec r}\\times\\underbrace{\\dot{\\vec h}}_{0}= -\\frac{\\mu}{r^{3}}\\vec r\\times(\\vec r\\times\\dot{\\vec r})\n$$ {#eq-init}\n\nUsing the triple product identity $\\vec{a}\\times(\\vec{b}\\times\\vec{c})=(\\vec{a}\\cdot\\vec{c})\\vec b-(\\vec a \\cdot \\vec b)\\vec c$ :\n\n$$\n\\vec r\\times(\\vec r\\times\\dot{\\vec r})= (\\vec r\\cdot\\dot{\\vec r})\\vec r - r^{2}\\dot{\\vec r}\n$$\n\nAnd using the identity $\\vec r \\cdot \\dot{\\vec r}=r\\dot r$, we get:\n\n$$  \\vec r\\times(\\vec r\\times\\dot{\\vec r})= (r\\dot r)\\vec r - r^{2}\\dot{\\vec r}  $$ {#eq-rcrossrcrossrdot}\n\n::: {.callout-note .side-note}\n#### $\\vec r \\cdot \\dot{\\vec r}=r\\dot r$\n\nWe know that:$$\\vec r \\cdot\\vec r=r^2$$\n\nThen:$$\\frac{d}{dt}(\\vec r\\cdot \\vec r)=2r\\frac{dr}{dt}=2r\\dot r\n$$\n\nBut,$$\\frac{d}{dt}(\\vec r \\cdot \\vec r)=\\vec r\\cdot \\frac{d\\vec r}{dt}+\\frac{d\\vec r}{dt}\\cdot \\vec r=2\\vec r\\cdot \\frac{d\\vec r}{dt}=2\\vec r\\cdot \\dot{\\vec r}$$\n\nHence:$$\n\\boxed{\\vec r\\cdot\\dot{\\vec r}=r\\dot r}\n$$\n:::\n\nInserting @eq-rcrossrcrossrdot into @eq-init :\n\n$$\n\\frac{d}{dt}(\\dot{\\vec r}\\times \\vec h)=- \\frac{\\mu}{r^3}\\left[(r \\dot{r})\\vec r - r^2 \\dot{\\vec r}\\right]=-\\mu \\left[\\frac{\\dot r \\vec r-r\\dot{\\vec{r}}}{r^2}\\right]\n$$ {#eq-six}\n\nBut ,\n\n$$\n\\frac{d}{dt}\\left(\\frac{\\vec r}{r}\\right)= \\frac{r\\dot{\\vec r}-\\dot r\\vec r}{r^2}=-\\frac{\\dot r\\vec r-r\\dot{\\vec{r}}}{r^2}\n$$\n\nsubstituting the above into @eq-six;\n\n$$\n\\frac{d}{dt}\\left(\\dot{\\vec r}\\times \\vec h\\right)= \\frac{d}{dt}\\left(\\mu\\frac{\\vec r}{r}\\right)\n$$\n\nWhich on integration, gives this solution:\n\n$$\n\\frac{1}{\\mu}(\\dot{\\vec{r}}\\times \\vec h)-\\frac{\\vec r}{r}=\\vec e\n$$ {#eq-eccvector}\n\nwhere $\\vec e$ is the constant of integration and called as the Laplace-Runge-Lenz Vector. The significance of this vector is that its magnitude $|\\vec e|$ gives the eccentricity $e$ and it faces in the direction of the periapsis of the orbit.\n\n## Orbit Equation (Trajectory Under Gravity)\n\n@eq-eccvector is the vector equation that represents the orbit of one of the bodies wrt the other in the two body problem. In order to obtain the scalar form, we take a dot product with $\\vec r$:\n\n$$\n\\frac{1}{\\mu}(\\dot{\\vec{r}}\\times \\vec h)\\cdot \\vec r-\\frac{\\vec r\\cdot \\vec r}{r}=\\vec e\\cdot \\vec r\n$$\n\nUsing the identity $\\vec a \\cdot (\\vec b \\times \\vec c)=(\\vec a \\times \\vec b)\\cdot \\vec c$;\n\n$$\n\\frac{1}{\\mu}\\underbrace{(\\vec r \\times \\dot{\\vec r})}_{\\vec h}\\cdot \\vec h- \\frac{\\vec r\\cdot\\vec r}{r}=\\vec e\\cdot\\vec r\n$$\n\n$$\n\\frac{h^2}{\\mu}-r=re\\cos{\\theta} \\text{ where } \\theta \\text{ is the true anomaly angle }\n$$\n\n![The true anomaly $\\theta$ is the angle between the eccentricity vector $\\vec{e}$ and the position vector $\\vec{r}$ (See Fig. 2.10 @curtis2005orbital)](fig2_2.jpeg){#fig-theta width=\"231\"}\n\nHence the final equation of orbit will turn out to be as follows:\n\n$$\n\\boxed{r=\\frac{\\frac{h^2}{\\mu}}{1+e\\cos{\\theta}}}\n$$ {#eq-rpos}\n\nThe above equation is similar to the parametric equation of a conic of eccentricity $e$ : $$r=\\frac{a(1-e^2)}{1+e\\cos{\\theta}}$$\n\n## Two body problem simulation\n\nBelow is a simulation of the two body problem with an example: a binary star system of two Suns whose masses are equal.\n\n::: {.content-visible when-format=\"html\"}\n<details class=\"code-fold\">\n\n<summary>Click to view the code</summary>\n\n``` python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D   # noqa: F401 (needed for 3-D plots)\nfrom matplotlib.animation import FuncAnimation, FFMpegWriter#, PillowWriter # (optional, for GIFs)\nimport os\n# --------------------  physical constants  --------------------\nG = 6.67430e-11      # SI [m^3 kg^-1 s^-2]\n\n# --------------------  helper functions  ----------------------\ndef orbital_velocity(mu, r, a=None, e=0.0):\n    \"\"\"\n    Magnitude of the relative velocity for the chosen orbit.\n    mu = G*(m1+m2)\n    r  = current separation\n    a  = semi-major axis (None -> circular orbit with radius r)\n    e  = eccentricity\n    Returns scalar speed v.\n    \"\"\"\n    if a is None:          # circular orbit\n        a = r\n    return np.sqrt(mu * (2.0/r - 1.0/a))\n\ndef set_initial_conditions(m1, m2, r_periapsis, e=0.0, inclination=0.0,omega=0.0, Omega=0.0, random_phase=False):\n    \"\"\"\n    Build the 12-component state vector\n    [r1, v1, r2, v2] consistent with the desired relative orbit.\n\n    All angles in radians.\n    Returns y0 = [x1,y,z1, vx1,vy1,vz1, x2,y2,z2, vx2,vy2,vz2]\n    \"\"\"\n    mu = G*(m1 + m2)\n\n    # Relative orbit: choose the periapsis along the x-axis\n    r_rel = np.array([r_periapsis, 0.0, 0.0])\n    v_rel_mag = orbital_velocity(mu, r_periapsis,a=r_periapsis/(1.0 - e), e=e)\n\n    # Rotate by argument of periapsis (œâ) in orbital plane\n    cosw, sinw = np.cos(omega), np.sin(omega)\n    rot_z = np.array([[cosw, -sinw, 0],[sinw,  cosw, 0],[0,     0,    1]])\n    r_rel = rot_z @ r_rel\n    v_rel = rot_z @ np.array([0.0, v_rel_mag, 0.0])\n\n    # Inclination & line-of-nodes rotation\n    cosi, sini = np.cos(inclination), np.sin(inclination)\n    cosO, sinO = np.cos(Omega), np.sin(Omega)\n\n    rot_inc = np.array([[1, 0,      0],\n                        [0, cosi,  -sini],\n                        [0, sini,   cosi]])\n    rot_O   = np.array([[cosO, -sinO, 0],\n                        [sinO,  cosO, 0],\n                        [0,     0,    1]])\n    r_rel = rot_O @ rot_inc @ r_rel\n    v_rel = rot_O @ rot_inc @ v_rel\n\n    # Centre of mass at origin and zero total momentum\n    M = m1 + m2\n    r1 = -(m2/M) * r_rel\n    r2 =  (m1/M) * r_rel\n    v1 = -(m2/M) * v_rel\n    v2 =  (m1/M) * v_rel\n\n    y0 = np.concatenate((r1, v1, r2, v2))\n    return y0\n\n# --------------------  integrator  ----------------------------\ndef rhs(t, y, m1, m2):\n    \"\"\"\n    Derivatives for the 12-D state vector y.\n    Uses simple Newtonian gravity.\n    \"\"\"\n    r1 = y[:3]\n    r2 = y[6:9]\n    dr = r2 - r1\n    dist3 = np.linalg.norm(dr)**3\n    a1 =  G * m2 * dr / dist3\n    a2 = -G * m1 * dr / dist3\n    dydt = np.empty_like(y)\n    dydt[:3]  = y[3:6]      # v1\n    dydt[3:6]  = a1\n    dydt[6:9]  = y[9:12]     # v2\n    dydt[9:12] = a2\n    return dydt\n\ndef rk4_step(f, t, y, h, *args):\n    k1 = f(t, y, *args)\n    k2 = f(t + 0.5*h, y + 0.5*h*k1, *args)\n    k3 = f(t + 0.5*h, y + 0.5*h*k2, *args)\n    k4 = f(t + h, y + h*k3, *args)\n    return y + (h/6.0)*(k1 + 2*k2 + 2*k3 + k4)\n\ndef simulate_two_body_orbit(m1, m2,\n                            r_periapsis,\n                            e=0.0,\n                            inclination=0.0,\n                            Omega=0.0,\n                            omega=0.0,\n                            t_end=None,\n                            dt=None,\n                            frames=2000):\n    \"\"\"\n    Main user-facing routine.\n    m1, m2 in kg\n    r_periapsis in m\n    e, inclination, Omega, omega in radians\n    t_end : total integration time (s)  (None -> 2 orbits)\n    dt    : step size (s)               (None -> adaptive)\n    frames: number of output samples\n    Returns dict with numpy arrays: t, r1, r2\n    \"\"\"\n    y0 = set_initial_conditions(m1, m2, r_periapsis, e,\n                                inclination, omega, Omega)\n\n    # Estimate period for circular orbit (Kepler)\n    a = r_periapsis/(1.0 - e)\n    P = 2*np.pi*np.sqrt(a**3 / (G*(m1 + m2)))\n\n    if t_end is None:\n        t_end = 2*P\n    if dt is None:\n        dt = P/5000.0\n\n    t = 0.0\n    y = y0.copy()\n    times, traj1, traj2 = [t], [y[:3]], [y[6:9]]\n\n    steps = int(np.ceil(t_end/dt))\n    for _ in range(steps):\n        if t + dt > t_end:\n            dt = t_end - t\n        y = rk4_step(rhs, t, y, dt, m1, m2)\n        t += dt\n        times.append(t)\n        traj1.append(y[:3])\n        traj2.append(y[6:9])\n\n    return dict(t=np.array(times),\n                r1=np.array(traj1),\n                r2=np.array(traj2))\n\n# --------------------  main program  ---------------------------\n# -----------------------------------------------------------\n#  Example: equal-mass binary (two Sun-like stars)\n# -----------------------------------------------------------\nif __name__ == \"__main__\":\n    # 1) Choose the system ----------------------------------------------------\n    m1 = 1.0e30            # 0.5 M‚òâ each (feel free to tweak)\n    m2 = 1.0e30\n    a    = 1.0e11          # semi-major axis = 0.67 AU ‚Üí period ‚âà 200 days\n    ecc  = 0.4             # eccentric orbit just to make it interesting\n    r_peri = a * (1 - ecc)\n\n    inc   = 20.0 * np.pi/180   # 20¬∞ inclination\n    Omega = 0.0\n    omega = 0.0\n\n    # integrate 2 full periods so we see several loops\n    mu = G*(m1 + m2)\n    P  = 2*np.pi * np.sqrt(a**3 / mu) # time period\n    t_end = 2*P\n    data = simulate_two_body_orbit(m1, m2,\n                                   r_periapsis=r_peri,\n                                   e=ecc,\n                                   inclination=inc,\n                                   Omega=Omega,\n                                   omega=omega,\n                                   t_end=t_end,\n                                   frames=600)\n\n    t  = data['t'] # time array\n    r1 = data['r1'] # position of body 1\n    r2 = data['r2'] # position of body 2\n    r_rel = r2 - r1  # relative position vector\n\n\n    # 2) 3-D figure (unchanged) ----------------------------------------------\n    fig = plt.figure(figsize=(7, 6))\n    ax  = fig.add_subplot(111, projection='3d')\n\n    lim = 1.05 * np.abs(r1).max()\n    ax.set_xlim(-lim, lim)\n    ax.set_ylim(-lim, lim)\n    ax.set_zlim(-lim, lim)\n    ax.set_xlabel('x [m]')\n    ax.set_ylabel('y [m]')\n    ax.set_zlabel('z [m]')\n    ax.set_title(r'Equal-mass binary ($m_1 = m_2 = 1\\times10^{30}\\,$kg)')\n\n    ax.plot([0], [0], [0], 'k+', markersize=8)\n\n    body1,  = ax.plot([], [], [], 'o', color='tab:red',   markersize=7, label='Star 1')\n    body2,  = ax.plot([], [], [], 'o', color='tab:green', markersize=7, label='Star 2')\n    trail1, = ax.plot([], [], [], '-', color='tab:red',   alpha=0.4, lw=1)\n    trail2, = ax.plot([], [], [], '-', color='tab:green', alpha=0.4, lw=1)\n    ax.legend()\n\n    max_trail = 300\n\n    # 3) Animation callbacks (same as before) ---------------------------------\n    def init():\n        body1.set_data([], [])\n        body1.set_3d_properties([])\n        body2.set_data([], [])\n        body2.set_3d_properties([])\n        trail1.set_data([], [])\n        trail1.set_3d_properties([])\n        trail2.set_data([], [])\n        trail2.set_3d_properties([])\n        return (body1, body2, trail1, trail2)\n\n    def update(frame):\n        body1.set_data([r1[frame, 0]], [r1[frame, 1]])\n        body1.set_3d_properties([r1[frame, 2]])\n        body2.set_data([r2[frame, 0]], [r2[frame, 1]])\n        body2.set_3d_properties([r2[frame, 2]])\n\n        start = 0\n        trail1.set_data(r1[start:frame, 0], r1[start:frame, 1])\n        trail1.set_3d_properties(r1[start:frame, 2])\n        trail2.set_data(r2[start:frame, 0], r2[start:frame, 1])\n        trail2.set_3d_properties(r2[start:frame, 2])\n\n        return (body1, body2, trail1, trail2)\n\n    # -----------------------------------------------------------\n    #  Optional 3-D GIF of the relative orbit ------------------\n    #  (body 2 as seen from body 1) -----------------------------\n    # -----------------------------------------------------------\n    fig3 = plt.figure(figsize=(6,5))\n    ax3  = fig3.add_subplot(111, projection='3d')\n    lim  = 1.05*np.abs(r_rel).max()\n    ax3.set_xlim(-lim, lim)\n    ax3.set_ylim(-lim, lim)\n    ax3.set_zlim(-lim, lim)\n    ax3.set_xlabel('x [m]')\n    ax3.set_ylabel('y [m]')\n    ax3.set_zlabel('z [m]')\n    ax3.set_title('Body 2 as seen from Body 1')\n\n    # body-1 (fixed)\n    body1_rel, = ax3.plot([0], [0], [0], 'o', color='gold', markersize=7, label='body-1')\n    rel_pt,  = ax3.plot([], [], [], 'o', color='tab:orange', markersize=7, label='body-2')\n    rel_trail, = ax3.plot([], [], [], '-', color='tab:orange', lw=1, alpha=0.5)\n    ax3.legend()\n\n    def init_rel():\n        rel_pt.set_data([], [])\n        rel_pt.set_3d_properties([])\n        rel_trail.set_data([], [])\n        rel_trail.set_3d_properties([])\n        return (body1_rel,rel_pt, rel_trail)\n\n    def update_rel(frame):\n        rel_pt.set_data([r_rel[frame, 0]], [r_rel[frame, 1]])\n        rel_pt.set_3d_properties([r_rel[frame, 2]])\n        start = 0\n        rel_trail.set_data(r_rel[start:frame, 0], r_rel[start:frame, 1])\n        rel_trail.set_3d_properties(r_rel[start:frame, 2])\n        return (body1_rel, rel_pt, rel_trail)\n\n\n    # 4) Build 3-D video file in inertial frame --------------------------------------------------------\n    ani = FuncAnimation(fig, update,\n                        frames=len(t),\n                        init_func=init,\n                        blit=True,\n                        interval=1000/ 240)\n\n    \n    outfile = \"binary_3d.mp4\"\n    ani.save(outfile, writer=FFMpegWriter(fps=240))\n    print(f\"Saved equal-mass binary animation ‚Üí {os.path.abspath(outfile)}\")\n    \n    # 5) Build 3-D video file in relative frame --------------------------------------------------------\n    ani_rel = FuncAnimation(fig3, update_rel,\n                            frames=len(t),  \n                            init_func=init_rel,\n                            blit=True,  \n                            interval=1000/ 240) \n    outfile_rel = \"binary_rel_3d.mp4\"\n    ani_rel.save(outfile_rel, writer=FFMpegWriter(fps=240))\n    print(f\"Saved relative orbit animation ‚Üí {os.path.abspath(outfile_rel)}\")\n```\n\nThe output will be a video that shows the following:\n\n</details>\n:::\n\n::::: columns\n::: {.column width=\"50%\"}\n![Inertial reference frame](binary_3d_final.gif){width=\"700\"}\n:::\n\n::: {.column width=\"50%\"}\n![Relative reference frame](binary_3d_final_rel.gif){width=\"350\" height=\"350\"}\n:::\n:::::\n\n<!-- end columns -->\n\n## The Energy Law\n\nBy taking the cross product of @eq-relmotion with the specific relative angular momentum per unit mass h, we were led to the vector equation @eq-eccvector, from which we obtained the orbit formula. Now we will see what we will get when we take dot product of @eq-relmotion with the relative velocity $\\dot{\\vec r}$.\n\n$$ \\ddot{\\vec{r}}.\\dot{\\vec{r}}=-\\mu\\frac{\\vec r.\\dot{\\vec{r}}}{r^3} $$\n\nNow the left side:\n\n$$ \\dot{\\vec r}\\cdot\\ddot{\\vec r} = \\frac{d}{dt}\\!\\left(\\tfrac12\\dot{\\vec r}\\cdot\\dot{\\vec r}\\right) = \\frac{d}{dt}\\!\\left(\\tfrac12 v^2\\right), $$\n\nwhere $v=\\|\\dot{\\vec r}\\|$ is the relative speed.\n\nRight side:\n\n$$ \\dot{\\vec r}\\cdot\\left(-\\mu\\frac{\\vec r}{r^3}\\right) = -\\mu\\,\\frac{\\vec r\\cdot\\dot{\\vec r}}{r^3}. $$\n\nBut note\n\n$$ \\frac{d}{dt}\\!\\left(\\frac{1}{r}\\right) = -\\frac{\\vec r\\cdot\\dot{\\vec r}}{r^3}, $$\n\nso the right side equals $\\mu\\,\\dfrac{d}{dt}(1/r)$ with a minus sign handled:\n\nPutting these together:\n\n$$ \\frac{d}{dt}\\!\\left(\\tfrac12 v^2\\right) = \\mu\\,\\frac{d}{dt}\\!\\left(\\frac{1}{r}\\right). $$\n\nRearrange to get a time derivative of a single quantity:\n\n$$ \\frac{d}{dt}\\!\\left(\\tfrac12 v^2 - \\frac{\\mu}{r}\\right) = 0. $$\n\nTherefore the quantity in parentheses is constant in time. Define the **specific mechanical energy** (energy per unit reduced mass, equivalently per unit mass in the relative problem)\n\n$$ \\frac{v^2}{2} - \\frac{\\mu}{r} =\\; \\varepsilon\\quad\\text{(a constant)} $$\n\nAt the perigee of an elliptical orbit, $\\vec r_p \\perp \\vec v_p$. Also,\n\n$$\nr_p=a(1-e)\n$$\n\nAnd,\n\n$$\nl\\text{ (semi-latus rectum) }=a(1-e^2)=\\frac{h^2}{\\mu}\n$$\n\n$$\nh_p=|\\vec r \\times \\vec v|_p=r_pv_p\n$$\n\nHence,\n\n$$\na(1-e^2)=\\frac{r_p^2v_p^2}{\\mu}\n$$\n\n$$\na(1-e^2)=\\frac{a^2(1-e)^2v_p^2}{\\mu}\n$$\n\nOn simplification,\n\n$$\nv_p^2=\\frac{\\mu(1+e)}{a(1-e)}\n$$\n\nSubstituting the above back into the specific mechanical energy equation:\n\n$$\n\\varepsilon\\;=\\frac{\\mu(1+e)}{2a(1-e)}-\\frac{\\mu}{a(1-e)}\n$$\n\nWe get,\n\n$$\n\\varepsilon = -\\frac{\\mu}{2a}\n$$\n\nHence the energy equation becomes,\n\n$$\n\\frac{v^2}{2} - \\frac{\\mu}{r} = -\\frac{\\mu}{2a}\n$$\n\nThis is called the **vis-viva** equation.","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"css":["styles.css"],"output-file":"chapter_02.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.32","bibliography":["references.bib"],"jupyter":{"kernelspec":{"name":"python3","display_name":"Python 3.12.5","language":"python"}},"theme":{"light":"cosmo","dark":"darkly"},"math":"mathjax"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}